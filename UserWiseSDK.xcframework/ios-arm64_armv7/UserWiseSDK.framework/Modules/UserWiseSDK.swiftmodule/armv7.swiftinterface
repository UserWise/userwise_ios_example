// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target armv7-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name UserWiseSDK
import AdSupport
import AppTrackingTransparency
import CoreTelephony
import Foundation
import Swift
import UIKit
import WebKit
@_hasMissingDesignatedInitializers @objc(MediaInfo) public class MediaInfo : ObjectiveC.NSObject {
  @objc final public let name: Swift.String
  @objc final public let contentType: Swift.String
  @objc final public let url: Swift.String
  @objc deinit
  @objc override dynamic public init()
}
public typealias UserWiseSDKResponseData = Swift.Decodable
@_inheritsConvenienceInitializers @objc public class SurveyWebViewController : UIKit.UIViewController {
  @objc public static func loadController(surveyUrl: Swift.String, splashScreenStyles: UserWiseSDK.SurveySplashScreenStyles, responseId: Swift.String)
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public func loadView()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  public func closeView()
  public func showWebView()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum VariablesError : Swift.Error {
  case redefinition
  public static func == (a: UserWiseSDK.VariablesError, b: UserWiseSDK.VariablesError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension VariablesError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class VariablesModule : ObjectiveC.NSObject {
  @objc(variablesDelegate) public var variablesDelegate: UserWiseSDK.UserWiseVariablesDelegate?
  @objc public func getVariableDefinition(name: Swift.String) -> UserWiseSDK.Variable?
  @objc public func define(variables: Swift.Array<UserWiseSDK.Variable>) throws
  @objc public func defineVariable(name: Swift.String, type: UserWiseSDK.VariableType, defaultValue: Any?) throws -> UserWiseSDK.Variable
  @objc public func define(_ variable: UserWiseSDK.Variable) throws -> UserWiseSDK.Variable
  @objc public static func getModuleName() -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(UserWise) public class UserWise : ObjectiveC.NSObject {
  @objc(sdkVersion) final public let sdkVersion: Swift.String
  @objc(surveysModule) public var surveysModule: UserWiseSDK.SurveysModule?
  @objc(offersModule) public var offersModule: UserWiseSDK.OffersModule?
  @objc(variablesModule) public var variablesModule: UserWiseSDK.VariablesModule?
  @objc(hostOverride) public var hostOverride: Foundation.URL? {
    @objc get
    @objc set(value)
  }
  @objc(debugMode) public var debugMode: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public func setApiKey(_ apiKey: Swift.String)
  @objc(userId) public var userId: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc public func initialize(apiKey: Swift.String, userId: Swift.String) -> UserWiseSDK.UserWise
  @objc public func onStart()
  @objc public func onStop()
  @objc public func isInitialized() -> Swift.Bool
  @objc public func forcePollRequest()
  @objc public func isAnyContentActive() -> Swift.Bool
  @objc public func getMedia(mediaId: Swift.String, handler: UserWiseSDK.UserWiseMediaInfoDelegate)
  @objc public func assignEvent(_ eventName: Swift.String, attributes: [Swift.String : Any]?)
  @objc public func setAttributes(_ attributes: [Swift.String : Any])
  @objc public static let sharedInstance: UserWiseSDK.UserWise
  @objc deinit
  @objc override dynamic public init()
}
@objc(OfferImpressionState) public enum OfferImpressionState : Swift.Int, Swift.RawRepresentable {
  case Initialized = 0
  case Viewed = 1
  case Dismissed = 2
  case Accepted = 3
  case PurchaseFailed = 4
  case Purchased = 5
  case Unknown = 6
  public typealias RawValue = Swift.String
  public var rawValue: UserWiseSDK.OfferImpressionState.RawValue {
    get
  }
  public init?(rawValue: UserWiseSDK.OfferImpressionState.RawValue)
}
@objc(Offer) public class Offer : ObjectiveC.NSObject {
  @objc(id) final public let id: Swift.String
  @objc(cost) final public let cost: Swift.Double
  @objc(iOSProductId) final public let iOSProductId: Swift.String
  @objc(currencies) final public let currencies: [Swift.String : Swift.Int]
  public init(id: Swift.String, cost: Swift.Double, iOSProductId: Swift.String, currencies: [Swift.String : Swift.Int])
  @objc deinit
  @objc override dynamic public init()
}
@objc(OfferImpression) public class OfferImpression : ObjectiveC.NSObject {
  @objc(id) final public let id: Swift.String
  @objc(state) final public let state: UserWiseSDK.OfferImpressionState
  @objc(offer) final public let offer: UserWiseSDK.Offer
  public init(_ offersModule: UserWiseSDK.OffersModule, id: Swift.String, state: UserWiseSDK.OfferImpressionState, offer: UserWiseSDK.Offer)
  @objc public func updateState(_ state: UserWiseSDK.OfferImpressionState)
  @objc deinit
  @objc override dynamic public init()
}
extension UIDevice {
  public static let modelName: Swift.String
}
@_inheritsConvenienceInitializers @objc public class OfferPopupController : UIKit.UIViewController {
  @objc public static func loadController(offerImpression: UserWiseSDK.OfferImpression?, offerUrl: Swift.String) -> UserWiseSDK.OfferPopupController
  @objc override dynamic public func loadView()
  @objc override dynamic public func viewDidLoad()
  public func dismiss()
  public func showWebView()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc(OfferViewAttemptFailedReason) public enum OfferViewAttemptFailedReason : Swift.Int {
  case OfferAlreadyActive = 0
  case ServerError = 1
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(UserWiseOfferDelegate) public protocol UserWiseOfferDelegate {
  @objc func onOfferUnavailable()
  @objc func onOfferAvailable(offerId: Swift.String)
  @objc func onOfferImpressionInitializationFailed(offerId: Swift.String)
  @objc func onOfferImpressionInitialized(_ offerImpression: UserWiseSDK.OfferImpression)
  @objc func onOfferViewed(offerImpression: UserWiseSDK.OfferImpression?)
  @objc func onOfferViewAttemptFailed(offerImpression: UserWiseSDK.OfferImpression?, reason: UserWiseSDK.OfferViewAttemptFailedReason)
  @objc func onOfferDismissed(offerImpression: UserWiseSDK.OfferImpression?)
  @objc func onOfferAccepted(offerImpression: UserWiseSDK.OfferImpression?)
}
@_hasMissingDesignatedInitializers @objc public class OffersModule : ObjectiveC.NSObject {
  @objc(offerDelegate) public var offerDelegate: UserWiseSDK.UserWiseOfferDelegate?
  @objc public func isAnOfferActive() -> Swift.Bool
  @objc public func initializeOfferImpression(offerId: Swift.String)
  @objc public func updateOfferImpressionState(offerImpression: UserWiseSDK.OfferImpression, newState: UserWiseSDK.OfferImpressionState)
  @objc public func showOffer(offerImpression: UserWiseSDK.OfferImpression)
  @objc public func dismissOffer(offerImpression: UserWiseSDK.OfferImpression?)
  @objc public func acceptOffer(offerImpression: UserWiseSDK.OfferImpression?)
  @objc override dynamic public init()
  @objc deinit
}
@objc(UserWiseVariablesDelegate) public protocol UserWiseVariablesDelegate {
  @objc func onVariablesInitialized()
}
@_hasMissingDesignatedInitializers @objc(SurveysModule) public class SurveysModule : ObjectiveC.NSObject {
  @objc(styleConfiguration) final public let styleConfiguration: UserWiseSDK.SurveySplashScreenStyles
  @objc(surveyDelegate) public var surveyDelegate: UserWiseSDK.UserWiseSurveyDelegate?
  @objc(isTakingSurvey) public var isTakingSurvey: Swift.Bool
  @objc public func setSplashScreenLogo(_ logo: UIKit.UIImage)
  @objc public func setColors(primaryColor: UIKit.UIColor?, splashScreenBackgroundColor: UIKit.UIColor?)
  @objc public func initializeSurveyInvite(responseId: Swift.String)
  @objc public func setSurveyInviteResponse(responseId: Swift.String, inviteId: Swift.String, wasAccepted: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc(VariableType) public enum VariableType : Swift.Int, Swift.RawRepresentable {
  case String = 0
  case Integer = 1
  case Float = 2
  case Datetime = 3
  case Boolean = 4
  case File = 5
  public typealias RawValue = Swift.String
  public var rawValue: UserWiseSDK.VariableType.RawValue {
    get
  }
  public init?(rawValue: UserWiseSDK.VariableType.RawValue)
}
@objc(Variable) public class Variable : ObjectiveC.NSObject {
  @objc(name) final public let name: Swift.String
  @objc(type) final public let type: UserWiseSDK.VariableType
  @objc(defaultValue) final public let defaultValue: Any?
  @objc public init(name: Swift.String, type: UserWiseSDK.VariableType, defaultValue: Any?)
  @objc override dynamic public init()
  @objc deinit
}
@objc(StringVariable) public class StringVariable : UserWiseSDK.Variable {
  @objc public init(name: Swift.String, defaultValue: Swift.String?)
  @objc public func getValue() -> Swift.String?
  @objc deinit
  @objc override public init(name: Swift.String, type: UserWiseSDK.VariableType, defaultValue: Any?)
}
@objc(IntegerVariable) public class IntegerVariable : UserWiseSDK.Variable {
  @objc public init(name: Swift.String, defaultValue: Swift.Int)
  @objc public func getValue() -> Swift.Int
  @objc deinit
  @objc override public init(name: Swift.String, type: UserWiseSDK.VariableType, defaultValue: Any?)
}
@objc(FloatVariable) public class FloatVariable : UserWiseSDK.Variable {
  @objc public init(name: Swift.String, defaultValue: Swift.Float)
  @objc public func getValue() -> Swift.Float
  @objc deinit
  @objc override public init(name: Swift.String, type: UserWiseSDK.VariableType, defaultValue: Any?)
}
@objc(DatetimeVariable) public class DatetimeVariable : UserWiseSDK.Variable {
  @objc public init(name: Swift.String, defaultValue: Foundation.Date?)
  @objc public func getValue() -> Foundation.Date?
  @objc deinit
  @objc override public init(name: Swift.String, type: UserWiseSDK.VariableType, defaultValue: Any?)
}
@objc(BooleanVariable) public class BooleanVariable : UserWiseSDK.Variable {
  @objc public init(name: Swift.String, defaultValue: Swift.Bool)
  @objc public func getValue() -> Swift.Bool
  @objc deinit
  @objc override public init(name: Swift.String, type: UserWiseSDK.VariableType, defaultValue: Any?)
}
@objc(FileVariable) public class FileVariable : UserWiseSDK.Variable {
  @objc public init(name: Swift.String)
  @objc public func getValue() -> Swift.String?
  @objc deinit
  @objc override public init(name: Swift.String, type: UserWiseSDK.VariableType, defaultValue: Any?)
}
@_inheritsConvenienceInitializers @objc public class SurveySplashScreenStyles : ObjectiveC.NSObject {
  @objc public var primaryColor: UIKit.UIColor? {
    @objc get
    @objc set(value)
  }
  @objc public var splashScreenBackgroundColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc public var logo: UIKit.UIImage? {
    @objc get
    @objc set(value)
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc(UserWiseSurveyDelegate) public protocol UserWiseSurveyDelegate {
  @objc func onSurveyAvailable(responseId: Swift.String)
  @objc func onSurveysUnavailable()
  @objc func onSurveyInviteInitialized(wasInitialized: Swift.Bool, responseId: Swift.String?, inviteId: Swift.String?)
  @objc func onSurveyEntered(responseId: Swift.String)
  @objc func onSurveyEnterFailed(responseId: Swift.String)
  @objc func onSurveyClosed(responseId: Swift.String)
  @objc func onSurveyCompleted(responseId: Swift.String)
}
@objc(UserWiseMediaInfoDelegate) public protocol UserWiseMediaInfoDelegate {
  @objc func onSuccess(mediaInfo: UserWiseSDK.MediaInfo)
  @objc func onFailure()
}
@_inheritsConvenienceInitializers @objc(UserWiseUtility) public class UserWiseUtility : ObjectiveC.NSObject {
  @objc public static func getCountry() -> Swift.String?
  @objc public static func getOsVersion() -> Swift.String?
  @objc public static func getPhoneCarrier() -> Swift.String?
  @objc public static func getDeviceType() -> Swift.String
  @objc public static func getTimeZoneIdentifier() -> Swift.String
  @objc public static func getIDFA() -> Swift.String
  @objc public static func getLanguage() -> Swift.String
  @objc public static func getConnectionType() -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(OfferPopupManager) public class OfferPopupManager : ObjectiveC.NSObject {
  @objc public static func showOffer(offerImpression: UserWiseSDK.OfferImpression?, offerUrl: Swift.String) -> UserWiseSDK.OfferPopupController?
  @objc public static func hideOffer()
  @objc public static func isAnOfferDisplayed() -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension UserWiseSDK.VariablesError : Swift.Equatable {}
extension UserWiseSDK.VariablesError : Swift.Hashable {}
extension UserWiseSDK.OfferImpressionState : Swift.Equatable {}
extension UserWiseSDK.OfferImpressionState : Swift.Hashable {}
extension UserWiseSDK.OfferViewAttemptFailedReason : Swift.Equatable {}
extension UserWiseSDK.OfferViewAttemptFailedReason : Swift.Hashable {}
extension UserWiseSDK.OfferViewAttemptFailedReason : Swift.RawRepresentable {}
extension UserWiseSDK.VariableType : Swift.Equatable {}
extension UserWiseSDK.VariableType : Swift.Hashable {}
